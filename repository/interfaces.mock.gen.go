// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method.
func (m *MockRepositoryInterface) CreateProfile(ctx context.Context, profile Profile) (Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", ctx, profile)
	ret0, _ := ret[0].(Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockRepositoryInterfaceMockRecorder) CreateProfile(ctx, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateProfile), ctx, profile)
}

// GetLogin mocks base method.
func (m *MockRepositoryInterface) GetLogin(ctx context.Context, filter map[string]interface{}) ([]LoginModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogin", ctx, filter)
	ret0, _ := ret[0].([]LoginModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogin indicates an expected call of GetLogin.
func (mr *MockRepositoryInterfaceMockRecorder) GetLogin(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogin", reflect.TypeOf((*MockRepositoryInterface)(nil).GetLogin), ctx, filter)
}

// GetProfile mocks base method.
func (m *MockRepositoryInterface) GetProfile(ctx context.Context, filter map[string]interface{}) ([]Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, filter)
	ret0, _ := ret[0].([]Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockRepositoryInterfaceMockRecorder) GetProfile(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockRepositoryInterface)(nil).GetProfile), ctx, filter)
}

// InsertIntoLogin mocks base method.
func (m *MockRepositoryInterface) InsertIntoLogin(ctx context.Context, login LoginModel) (LoginModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoLogin", ctx, login)
	ret0, _ := ret[0].(LoginModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoLogin indicates an expected call of InsertIntoLogin.
func (mr *MockRepositoryInterfaceMockRecorder) InsertIntoLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoLogin", reflect.TypeOf((*MockRepositoryInterface)(nil).InsertIntoLogin), ctx, login)
}

// UpdateLogin mocks base method.
func (m *MockRepositoryInterface) UpdateLogin(ctx context.Context, updatedBy, updatedData map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLogin", ctx, updatedBy, updatedData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLogin indicates an expected call of UpdateLogin.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateLogin(ctx, updatedBy, updatedData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogin", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateLogin), ctx, updatedBy, updatedData)
}

// UpdateProfile mocks base method.
func (m *MockRepositoryInterface) UpdateProfile(ctx context.Context, updatedBy, updatedData map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, updatedBy, updatedData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateProfile(ctx, updatedBy, updatedData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateProfile), ctx, updatedBy, updatedData)
}
